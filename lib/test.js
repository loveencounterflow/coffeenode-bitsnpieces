// Generated by CoffeeScript 1.7.1
(function() {
  var BNP, TRM, alert, assert, badge, debug, echo, help, info, log, njs_path, praise, rpr, urge, warn, whisper,
    __slice = [].slice;

  njs_path = require('path');

  TRM = require('coffeenode-trm');

  rpr = TRM.rpr.bind(TRM);

  badge = 'BITSNPIECES/test';

  log = TRM.get_logger('plain', badge);

  info = TRM.get_logger('info', badge);

  whisper = TRM.get_logger('whisper', badge);

  alert = TRM.get_logger('alert', badge);

  debug = TRM.get_logger('debug', badge);

  warn = TRM.get_logger('warn', badge);

  help = TRM.get_logger('help', badge);

  urge = TRM.get_logger('urge', badge);

  praise = TRM.get_logger('praise', badge);

  echo = TRM.echo.bind(TRM);

  assert = require('assert');

  BNP = require('./main');

  this.test = {
    ok: (function(_this) {
      return function(result) {

        /* Tests whether `result` is strictly `true` (not only true-ish). */
        if (result !== true) {
          throw new Error("expected true, got\n" + (rpr(result)));
        }
      };
    })(this),
    fail: (function(_this) {
      return function(message) {
        throw new Error(message);
      };
    })(this),
    eq: (function(_this) {
      return function() {
        var P, p, values, _i, _len;
        P = 1 <= arguments.length ? __slice.call(arguments, 0) : [];

        /* Tests whether all arguments are pairwise and deeply equal. Uses CoffeeNode Bits'n'Pieces' `equal`
        for testing as (1) Node's `assert` distinguishes—unnecessarily—between shallow and deep equality, and,
        worse, [`assert.equal` and `assert.deepEqual` are broken](https://github.com/joyent/node/issues/7161),
        as they use JavaScript's broken `==` equality operator instead of `===`.
         */
        values = [];
        for (_i = 0, _len = P.length; _i < _len; _i++) {
          p = P[_i];
          _this["new"]._delete_grammar_references(p);
          values.push(rpr(p));
        }
        if (!BNP.equals.apply(BNP, P)) {
          throw new Error("not equal: \n" + (values.join('\n')));
        }
      };
    })(this),
    throws: assert.throws.bind(assert)
  };

}).call(this);
